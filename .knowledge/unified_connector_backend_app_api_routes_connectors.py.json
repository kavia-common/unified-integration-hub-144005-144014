{"is_source_file": true, "format": "Python", "description": "This file defines API routes related to connectors management in a FastAPI application, including listing connectors, initiating OAuth flows, validating PAT credentials, searching, creating issues/pages, listing projects/spaces, and deleting connections. It sets up HTTP endpoints with associated logic, dependency injection, and interaction with connector registry and tenant context.", "external_files": [".../core/tenancy.py", ".../core/errors.py", ".../core/logging.py", ".../core/token_store.py", ".../connectors/registry.py", ".../api/models.py"], "external_methods": ["tenant_dep()", "http_error()", "ErrorCode.NOT_FOUND", "ErrorCode.VALIDATION", "token_store().list_connectors_for_tenant()", "token_store().delete()", "connectors_registry().list()", "connectors_registry().get()", "connectors_registry().list_collections()", "conn.get_oauth_authorize_url()", "conn.exchange_code_for_tokens()", "conn.validate_pat()", "conn.search()", "conn.create()", "info()"], "published": ["list_connectors", "oauth_login", "oauth_callback", "pat_validate", "search_items", "create_jira_issue", "create_confluence_page", "list_jira_projects", "list_confluence_spaces", "delete_connection"], "classes": [{"name": "Envelope", "description": "A generic response wrapper model."}, {"name": "OAuthStartResponse", "description": "Response model containing OAuth initiation URL details."}, {"name": "PatCredentials", "description": "Model for PAT (Personal Access Token) credentials payload."}, {"name": "SearchResponse", "description": "Model for search results payload."}, {"name": "CreateJiraIssueRequest", "description": "Payload model for creating Jira issues."}, {"name": "CreateConfluencePageRequest", "description": "Payload model for creating Confluence pages."}], "methods": [{"name": "list_connectors(tenant: TenantContext = Depends(tenant_dep))", "description": "Lists all available connectors with connection status for the tenant.", "scope": "", "scopeKind": ""}, {"name": "oauth_login(connector_id: str, tenant: TenantContext = Depends(tenant_dep), return_url: Optional[bool] = Query(default=True))", "description": "Initiates OAuth flow for a specific connector, returning authorization URL.", "scope": "", "scopeKind": ""}, {"name": "oauth_callback(connector_id: str, code: str, state: str, tenant: TenantContext = Depends(tenant_dep))", "description": "Handles OAuth callback: exchanges code for tokens and stores credentials.", "scope": "", "scopeKind": ""}, {"name": "pat_validate(connector_id: str, body: PatCredentials, tenant: TenantContext = Depends(tenant_dep))", "description": "Validates provided Personal Access Token credentials for a connector.", "scope": "", "scopeKind": ""}, {"name": "search_items( connector_id: str, q: str = Query(..., alias=\"q\", description=\"Search query\"), resource: str = Query(..., description=\"Resource type, e.g., issue|page\"), page: int = Query(1, ge=1), per_page: int = Query(20, ge=1, le=100), tenant: TenantContext = Depends(tenant_dep), )", "description": "Performs search on items within a connector.", "scope": "", "scopeKind": ""}, {"name": "create_jira_issue(body: CreateJiraIssueRequest, tenant: TenantContext = Depends(tenant_dep))", "description": "Creates a Jira issue via the Jira connector.", "scope": "", "scopeKind": ""}, {"name": "create_confluence_page(body: CreateConfluencePageRequest, tenant: TenantContext = Depends(tenant_dep))", "description": "Creates a Confluence page via the Confluence connector.", "scope": "", "scopeKind": ""}, {"name": "list_jira_projects(tenant: TenantContext = Depends(tenant_dep))", "description": "Lists Jira projects via the Jira connector.", "scope": "", "scopeKind": ""}, {"name": "list_confluence_spaces(tenant: TenantContext = Depends(tenant_dep))", "description": "Lists Confluence spaces via the Confluence connector.", "scope": "", "scopeKind": ""}, {"name": "delete_connection(connector_id: str, tenant: TenantContext = Depends(tenant_dep))", "description": "Deletes stored credentials for a given connector.", "scope": "", "scopeKind": ""}], "calls": ["connectors_registry().list()", "connectors_registry().get()", "token_store().list_connectors_for_tenant()", "token_store().delete()", "conn.get_oauth_authorize_url()", "conn.exchange_code_for_tokens()", "conn.validate_pat()", "conn.search()", "conn.create()", "connectors_registry().list_collections()", "info()"], "search-terms": ["connectors", "OAuth", "PAT validation", "search", "create issues", "list projects", "list spaces", "backend API", "connector management"], "state": 2, "file_id": 21, "knowledge_revision": 52, "git_revision": "", "ctags": [{"_type": "tag", "name": "create_confluence_page", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/api/routes/connectors.py", "pattern": "/^def create_confluence_page(body: CreateConfluencePageRequest, tenant: TenantContext = Depends(te/", "language": "Python", "kind": "function", "signature": "(body: CreateConfluencePageRequest, tenant: TenantContext = Depends(tenant_dep))"}, {"_type": "tag", "name": "create_jira_issue", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/api/routes/connectors.py", "pattern": "/^def create_jira_issue(body: CreateJiraIssueRequest, tenant: TenantContext = Depends(tenant_dep))/", "language": "Python", "kind": "function", "signature": "(body: CreateJiraIssueRequest, tenant: TenantContext = Depends(tenant_dep))"}, {"_type": "tag", "name": "delete_connection", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/api/routes/connectors.py", "pattern": "/^def delete_connection(connector_id: str, tenant: TenantContext = Depends(tenant_dep)):$/", "language": "Python", "kind": "function", "signature": "(connector_id: str, tenant: TenantContext = Depends(tenant_dep))"}, {"_type": "tag", "name": "list_confluence_spaces", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/api/routes/connectors.py", "pattern": "/^def list_confluence_spaces(tenant: TenantContext = Depends(tenant_dep)):$/", "language": "Python", "kind": "function", "signature": "(tenant: TenantContext = Depends(tenant_dep))"}, {"_type": "tag", "name": "list_connectors", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/api/routes/connectors.py", "pattern": "/^def list_connectors(tenant: TenantContext = Depends(tenant_dep)):$/", "language": "Python", "kind": "function", "signature": "(tenant: TenantContext = Depends(tenant_dep))"}, {"_type": "tag", "name": "list_jira_projects", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/api/routes/connectors.py", "pattern": "/^def list_jira_projects(tenant: TenantContext = Depends(tenant_dep)):$/", "language": "Python", "kind": "function", "signature": "(tenant: TenantContext = Depends(tenant_dep))"}, {"_type": "tag", "name": "oauth_callback", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/api/routes/connectors.py", "pattern": "/^def oauth_callback(connector_id: str, code: str, state: str, tenant: TenantContext = Depends(ten/", "language": "Python", "kind": "function", "signature": "(connector_id: str, code: str, state: str, tenant: TenantContext = Depends(tenant_dep))"}, {"_type": "tag", "name": "oauth_login", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/api/routes/connectors.py", "pattern": "/^def oauth_login(connector_id: str, tenant: TenantContext = Depends(tenant_dep), return_url: Opti/", "language": "Python", "kind": "function", "signature": "(connector_id: str, tenant: TenantContext = Depends(tenant_dep), return_url: Optional[bool] = Query(default=True))"}, {"_type": "tag", "name": "pat_validate", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/api/routes/connectors.py", "pattern": "/^def pat_validate(connector_id: str, body: PatCredentials, tenant: TenantContext = Depends(tenant/", "language": "Python", "kind": "function", "signature": "(connector_id: str, body: PatCredentials, tenant: TenantContext = Depends(tenant_dep))"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/api/routes/connectors.py", "pattern": "/^router = APIRouter(prefix=\"\\/api\\/connectors\", tags=[\"connectors\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "search_items", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/api/routes/connectors.py", "pattern": "/^def search_items($/", "language": "Python", "kind": "function", "signature": "( connector_id: str, q: str = Query(..., alias=\"q\", description=\"Search query\"), resource: str = Query(..., description=\"Resource type, e.g., issue|page\"), page: int = Query(1, ge=1), per_page: int = Query(20, ge=1, le=100), tenant: TenantContext = Depends(tenant_dep), )"}], "hash": "823bf1df48e00d82f021959db1de3d4b", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/app/api/routes/connectors.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/api\\/connectors\", tags=[\"connectors\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"52": ""}]}