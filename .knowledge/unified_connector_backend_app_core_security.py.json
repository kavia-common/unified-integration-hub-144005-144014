{"is_source_file": true, "format": "Python", "description": "This file provides security helper functions for encryption and decryption of credential blobs using AES-GCM mode. It includes internal utility functions for key normalization and fetching the AESGCM cipher instance, as well as public interface functions for encrypting and decrypting data. The code conditionally handles the presence or absence of an encryption key, storing credentials in plaintext if no key is provided.", "external_files": ["cryptography.hazmat.primitives.ciphers.aead.AESGCM", ".settings"], "external_methods": ["get_settings()"], "published": ["encrypt_blob", "decrypt_blob"], "classes": [], "methods": [{"name": "bytes _normalize_key(raw: str)", "description": "Converts an input string to a 32-byte key, accepting base64, hex, or raw UTF-8, and adjusts length accordingly.", "scope": "", "scopeKind": ""}, {"name": "Optional[AESGCM] _get_aesgcm()", "description": "Retrieves an AESGCM cipher instance using the encryption key from settings, or returns None if no key is configured.", "scope": "", "scopeKind": ""}, {"name": "bytes encrypt_blob(plaintext: bytes)", "description": "Encrypts bytes using AES-GCM with a random nonce; returns nonce concatenated with ciphertext and tag.", "scope": "", "scopeKind": ""}, {"name": "bytes decrypt_blob(blob: bytes)", "description": "Decrypts bytes using AES-GCM, expecting input to be nonce|ciphertext|tag format.", "scope": "", "scopeKind": ""}], "calls": ["get_settings().encryption_key", "_normalize_key(raw)", "_get_aesgcm()", "secrets.token_bytes(12)", "aead.encrypt(nonce, plaintext, associated_data=None)", "aead.decrypt(nonce, ct, associated_data=None)"], "search-terms": ["AES-GCM encryption", "credential blob security", "encryption key", "security helper functions", "cryptography", "security in Python", "credential encryption", "app core security"], "state": 2, "file_id": 13, "knowledge_revision": 36, "git_revision": "", "ctags": [{"_type": "tag", "name": "_get_aesgcm", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/core/security.py", "pattern": "/^def _get_aesgcm() -> Optional[AESGCM]:$/", "language": "Python", "typeref": "typename:Optional[AESGCM]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "_normalize_key", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/core/security.py", "pattern": "/^def _normalize_key(raw: str) -> bytes:$/", "language": "Python", "typeref": "typename:bytes", "kind": "function", "signature": "(raw: str)"}, {"_type": "tag", "name": "decrypt_blob", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/core/security.py", "pattern": "/^def decrypt_blob(blob: bytes) -> bytes:$/", "language": "Python", "typeref": "typename:bytes", "kind": "function", "signature": "(blob: bytes)"}, {"_type": "tag", "name": "encrypt_blob", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/core/security.py", "pattern": "/^def encrypt_blob(plaintext: bytes) -> bytes:$/", "language": "Python", "typeref": "typename:bytes", "kind": "function", "signature": "(plaintext: bytes)"}], "hash": "36edfd86ba945a3bcad3d894761593ef", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/app/core/security.py", "revision_history": [{"36": ""}]}