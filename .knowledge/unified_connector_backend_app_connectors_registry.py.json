{"is_source_file": true, "format": "Python", "description": "This file defines the in-memory registry and API endpoints for managing connector objects in a FastAPI application, including registration, listing, and retrieval of connectors, as well as tenant context handling.", "external_files": [".base (from .base import ...)", "fastapi (imported modules)", "pydantic (BaseModel, Field)"], "external_methods": ["FastAPI.APIRouter", "FastAPI.HTTPException", "FastAPI.Depends", "FastAPI.Query", "pydantic.BaseModel", "pydantic.Field"], "published": ["register", "list_connectors", "get_connector", "make_connectors_router"], "classes": [{"name": "TenantContext", "description": "Pydantic model representing tenant context with a tenant_id string"}], "methods": [{"name": "register(connector: BaseConnector)", "description": "Registers a connector object into the in-memory registry.", "scope": "", "scopeKind": ""}, {"name": "List[Dict] list_connectors()", "description": "Returns a list of all registered connector definitions.", "scope": "", "scopeKind": ""}, {"name": "BaseConnector get_connector(id: str)", "description": "Retrieves a registered connector by its id or raises KeyError if not found.", "scope": "", "scopeKind": ""}, {"name": "TenantContext get_tenant(tenant_id: Optional[str] = Query(None, description=\"Tenant id for multi-tenant scoping\"))", "description": "Creates a TenantContext object, defaulting tenant_id to 'demo-tenant' if not provided.", "scope": "", "scopeKind": ""}, {"name": "APIRouter make_connectors_router()", "description": "Creates and returns a FastAPI APIRouter with the connectors listing endpoint.", "scope": "", "scopeKind": ""}, {"name": "list_all(_tenant: TenantContext = Depends(get_tenant))", "scope": "make_connectors_router", "scopeKind": "function", "description": "unavailable"}], "calls": ["list_connectors()", "get_tenant(tenant_id)", "list_all(_tenant)"], "search-terms": ["register", "Connector registry", "FastAPI routers", "Multi-tenant connector API", "connectors listing"], "state": 2, "file_id": 8, "knowledge_revision": 17, "git_revision": "", "ctags": [{"_type": "tag", "name": "TenantContext", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/registry.py", "pattern": "/^class TenantContext(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_registry", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/registry.py", "pattern": "/^_registry: Dict[str, BaseConnector] = {}$/", "language": "Python", "typeref": "typename:Dict[str, BaseConnector]", "kind": "variable"}, {"_type": "tag", "name": "get_connector", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/registry.py", "pattern": "/^def get_connector(id: str) -> BaseConnector:$/", "language": "Python", "typeref": "typename:BaseConnector", "kind": "function", "signature": "(id: str)"}, {"_type": "tag", "name": "get_tenant", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/registry.py", "pattern": "/^def get_tenant(tenant_id: Optional[str] = Query(None, description=\"Tenant id for multi-tenant sc/", "language": "Python", "typeref": "typename:TenantContext", "kind": "function", "signature": "(tenant_id: Optional[str] = Query(None, description=\"Tenant id for multi-tenant scoping\"))"}, {"_type": "tag", "name": "list_all", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/registry.py", "pattern": "/^    async def list_all(_tenant: TenantContext = Depends(get_tenant)):$/", "file": true, "language": "Python", "kind": "function", "signature": "(_tenant: TenantContext = Depends(get_tenant))", "scope": "make_connectors_router", "scopeKind": "function"}, {"_type": "tag", "name": "list_connectors", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/registry.py", "pattern": "/^def list_connectors() -> List[Dict]:$/", "language": "Python", "typeref": "typename:List[Dict]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "make_connectors_router", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/registry.py", "pattern": "/^def make_connectors_router() -> APIRouter:$/", "language": "Python", "typeref": "typename:APIRouter", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "register", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/registry.py", "pattern": "/^def register(connector: BaseConnector):$/", "language": "Python", "kind": "function", "signature": "(connector: BaseConnector)"}, {"_type": "tag", "name": "tenant_id", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/registry.py", "pattern": "/^    tenant_id: str = Field(..., description=\"Tenant identifier\")$/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "TenantContext", "scopeKind": "class"}], "hash": "3f0116a03ef4b6b68a55d9f062104825", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/app/connectors/registry.py", "fields": [{"name": "Dict[str, BaseConnector] _registry", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "str tenant_id", "scope": "TenantContext", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"17": ""}]}