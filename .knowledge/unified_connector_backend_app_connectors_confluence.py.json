{"is_source_file": true, "format": "Python", "description": "This file implements a Confluence connector class for interacting with Confluence via mocked calls for demonstration purposes. It provides methods for OAuth authorization URL generation, token exchange, PAT validation, search, create, and listing collections of spaces.", "external_files": ["from .base import BaseConnector, NormalizedItem, CreateResult", "from ..core.token_store import token_store"], "external_methods": ["token_store()"], "published": ["confluence_connector"], "classes": [{"name": "ConfluenceConnector", "description": "A connector class that provides methods to interact with Confluence, including authorization, token exchange, search, create, and listing spaces."}], "methods": [{"name": "Dict[str,str] get_oauth_authorize_url(self, tenant_id: str, state: str)", "description": "Generates the OAuth authorization URL with provided tenant ID and state.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] exchange_code_for_tokens(self, tenant_id: str, code: str, state: str)", "description": "Simulates exchanging an authorization code for access and refresh tokens, storing them in token store.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "bool validate_pat(self, tenant_id: str, credentials: Dict[str, Any])", "description": "Validates Personal Access Token credentials and stores them if valid.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] search(self, tenant_id: str, query: str, resource: str, page: int = 1, per_page: int = 20)", "description": "Performs a mocked search of pages related to a query, returning a list of normalized items.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "CreateResult create(self, tenant_id: str, resource: str, payload: Dict[str, Any])", "description": "Creates a new page in Confluence with given payload, returns a CreateResult with the new item.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] list_collections(self, tenant_id: str, resource: str)", "description": "Lists available Confluence spaces.", "scope": "ConfluenceConnector", "scopeKind": "class"}], "calls": ["token_store().set"], "search-terms": ["Confluence", "OAuth", "token exchange", "search pages", "create page", "spaces"], "state": 2, "file_id": 19, "knowledge_revision": 48, "git_revision": "", "ctags": [{"_type": "tag", "name": "ConfluenceConnector", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/confluence.py", "pattern": "/^class ConfluenceConnector(BaseConnector):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "confluence_connector", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/confluence.py", "pattern": "/^confluence_connector = ConfluenceConnector()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/confluence.py", "pattern": "/^    def create(self, tenant_id: str, resource: str, payload: Dict[str, Any]) -> CreateResult:$/", "language": "Python", "typeref": "typename:CreateResult", "kind": "member", "signature": "(self, tenant_id: str, resource: str, payload: Dict[str, Any])", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "display_name", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/confluence.py", "pattern": "/^    display_name = \"Confluence\"$/", "language": "Python", "kind": "variable", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "exchange_code_for_tokens", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/confluence.py", "pattern": "/^    def exchange_code_for_tokens(self, tenant_id: str, code: str, state: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, tenant_id: str, code: str, state: str)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_oauth_authorize_url", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/confluence.py", "pattern": "/^    def get_oauth_authorize_url(self, tenant_id: str, state: str) -> Dict[str, str]:$/", "language": "Python", "typeref": "typename:Dict[str,str]", "kind": "member", "signature": "(self, tenant_id: str, state: str)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "id", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/confluence.py", "pattern": "/^    id = \"confluence\"$/", "language": "Python", "kind": "variable", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "list_collections", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/confluence.py", "pattern": "/^    def list_collections(self, tenant_id: str, resource: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, tenant_id: str, resource: str)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "required_scopes", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/confluence.py", "pattern": "/^    required_scopes: List[str] = [\"read:confluence-content\", \"write:confluence-content\"]$/", "language": "Python", "typeref": "typename:List[str]", "kind": "variable", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "search", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/confluence.py", "pattern": "/^    def search(self, tenant_id: str, query: str, resource: str, page: int = 1, per_page: int = 2/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, tenant_id: str, query: str, resource: str, page: int = 1, per_page: int = 20)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "supports_oauth", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/confluence.py", "pattern": "/^    supports_oauth = True$/", "language": "Python", "kind": "variable", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "validate_pat", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/app/connectors/confluence.py", "pattern": "/^    def validate_pat(self, tenant_id: str, credentials: Dict[str, Any]) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, tenant_id: str, credentials: Dict[str, Any])", "scope": "ConfluenceConnector", "scopeKind": "class"}], "hash": "7b7a73667a0d3ab51426c3b04c17c2c4", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/app/connectors/confluence.py", "fields": [{"name": "confluence_connector = ConfluenceConnector()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "display_name = \"Confluence\"", "scope": "ConfluenceConnector", "scopeKind": "class", "description": "unavailable"}, {"name": "id = \"confluence\"", "scope": "ConfluenceConnector", "scopeKind": "class", "description": "unavailable"}, {"name": "List[str] required_scopes", "scope": "ConfluenceConnector", "scopeKind": "class", "description": "unavailable"}, {"name": "supports_oauth = True", "scope": "ConfluenceConnector", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"48": ""}]}