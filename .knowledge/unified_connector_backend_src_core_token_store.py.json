{"is_source_file": true, "format": "Python", "description": "This file defines the TokenStore class responsible for managing encrypted OAuth token storage, retrieval, and refresh logic. It includes methods for saving, fetching, decrypting tokens, and refreshing Atlassian tokens when expired.", "external_files": ["src.core.db", "src.core.logging", "src.core.models", "src.core.security", "src.core.settings", "src.core.observability", "httpx"], "external_methods": ["tenant_collection", "upsert_by_id", "get_logger", "get_settings", "encrypt_secret", "decrypt_secret", "compute_expiry", "is_expired", "increment_metric", "mask_secret_value"], "published": ["TokenStore"], "classes": [{"name": "TokenStore", "description": "A class that manages encrypted storage, retrieval, and refresh of OAuth tokens for tenants and connectors."}], "methods": [{"name": "None save_tokens( self, connector_id: str, name: str, access_token: str, refresh_token: Optional[str], scope: Optional[str], expires_at: Optional[datetime], extra: Optional[Dict[str, Any]] = None, )", "description": "Encrypts and stores OAuth tokens and metadata for a connector.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "Optional[OAuthState] get_tokens(self, connector_id: str)", "description": "Retrieves stored encrypted OAuth tokens for a connector as an OAuthState object.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "Tuple[Optional[str],Optional[str],Optional[datetime]] get_decrypted_access(self, connector_id: str)", "description": "Decrypts and returns the access and refresh tokens along with expiry.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "Optional[str] ensure_valid_token_atlassian( self, connector_id: str, name: str, client_id: str, client_secret: Optional[str], refresh_token: Optional[str], redirect_uri: str, )", "description": "Checks token validity, refreshes if expired, stores updated tokens, and returns current access token for Atlassian.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "__init__(self, tenant_id: str)", "scope": "TokenStore", "scopeKind": "class", "description": "unavailable"}], "calls": ["self.collection.find_one", "upsert_by_id", "decrypt_secret", "is_expired", "compute_expiry", "self.save_tokens", "resp.json", "logger.error", "logger.info", "increment_metric"], "search-terms": ["TokenStore", "encrypt_secret", "decrypt_secret", "OAuthState", "ensure_valid_token_atlassian", "refresh_token", "atlassian.com/oauth/token"], "state": 2, "file_id": 21, "knowledge_revision": 84, "git_revision": "966bfcc341fc3ee3996957361265b65bdb2f1ce9", "revision_history": [{"47": ""}, {"51": "966bfcc341fc3ee3996957361265b65bdb2f1ce9"}, {"83": "966bfcc341fc3ee3996957361265b65bdb2f1ce9"}, {"84": "966bfcc341fc3ee3996957361265b65bdb2f1ce9"}], "ctags": [{"_type": "tag", "name": "TokenStore", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^class TokenStore:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    def __init__(self, tenant_id: str):$/", "language": "Python", "kind": "member", "signature": "(self, tenant_id: str)", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "ensure_valid_token_atlassian", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    async def ensure_valid_token_atlassian($/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "member", "signature": "( self, connector_id: str, name: str, client_id: str, client_secret: Optional[str], refresh_token: Optional[str], redirect_uri: str, )", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "get_decrypted_access", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    def get_decrypted_access(self, connector_id: str) -> Tuple[Optional[str], Optional[str], Opt/", "language": "Python", "typeref": "typename:Tuple[Optional[str],Optional[str],Optional[datetime]]", "kind": "member", "signature": "(self, connector_id: str)", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "get_tokens", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    def get_tokens(self, connector_id: str) -> Optional[OAuthState]:$/", "language": "Python", "typeref": "typename:Optional[OAuthState]", "kind": "member", "signature": "(self, connector_id: str)", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^logger = get_logger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "save_tokens", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    def save_tokens($/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "( self, connector_id: str, name: str, access_token: str, refresh_token: Optional[str], scope: Optional[str], expires_at: Optional[datetime], extra: Optional[Dict[str, Any]] = None, )", "scope": "TokenStore", "scopeKind": "class"}], "hash": "d0aaede02fef2ee6c0204806fe2739f2", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/src/core/token_store.py", "fields": [{"name": "logger = get_logger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}]}