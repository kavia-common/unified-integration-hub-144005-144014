{"is_source_file": true, "format": "Python", "description": "This file defines the TokenStore class responsible for managing OAuth tokens, including storing encrypted tokens, retrieving them, decrypting, and refreshing access tokens for specific tenants and connectors within the application.", "external_files": ["src.core.db", "src.core.logging", "src.core.models", "src.core.security", "src.core.settings", "httpx"], "external_methods": ["tenant_collection", "upsert_by_id", "get_logger", "OAuthState", "encrypt_secret", "decrypt_secret", "compute_expiry", "is_expired"], "published": ["TokenStore"], "classes": [{"name": "TokenStore", "description": "Manages encrypted storage and refresh of OAuth tokens per tenant and connector, including saving, retrieving, decrypting, and refreshing tokens as needed."}], "methods": [{"name": "__init__(self, tenant_id: str)", "description": "Initializes a TokenStore instance with tenant-specific collection and settings.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "None save_tokens( self, connector_id: str, name: str, access_token: str, refresh_token: Optional[str], scope: Optional[str], expires_at: Optional[datetime], extra: Optional[Dict[str, Any]] = None, )", "description": "Stores encrypted OAuth tokens and metadata for a connector.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "Optional[OAuthState] get_tokens(self, connector_id: str)", "description": "Fetches encrypted OAuth tokens for a connector as an OAuthState object.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "Tuple[Optional[str],Optional[str],Optional[datetime]] get_decrypted_access(self, connector_id: str)", "description": "Returns decrypted access and refresh tokens along with expiry timestamp.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "Optional[str] ensure_valid_token_atlassian( self, connector_id: str, name: str, client_id: str, client_secret: Optional[str], refresh_token: Optional[str], redirect_uri: str, )", "description": "Refreshes the Atlassian access token if expired, updates storage, and returns the current access token.", "scope": "TokenStore", "scopeKind": "class"}], "calls": ["self.collection.find_one", "upsert_by_id", "decrypt_secret", "is_expired", "compute_expiry", "self.save_tokens", "httpx.AsyncClient", "client.post"], "search-terms": ["TokenStore", "OAuth tokens", "encrypted storage", "atlassian token refresh", "tenant_collection", "save_tokens", "get_decrypted_access"], "state": 2, "file_id": 21, "knowledge_revision": 51, "git_revision": "966bfcc341fc3ee3996957361265b65bdb2f1ce9", "revision_history": [{"47": ""}, {"51": "966bfcc341fc3ee3996957361265b65bdb2f1ce9"}], "ctags": [{"_type": "tag", "name": "TokenStore", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^class TokenStore:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    def __init__(self, tenant_id: str):$/", "language": "Python", "kind": "member", "signature": "(self, tenant_id: str)", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "ensure_valid_token_atlassian", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    async def ensure_valid_token_atlassian($/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "member", "signature": "( self, connector_id: str, name: str, client_id: str, client_secret: Optional[str], refresh_token: Optional[str], redirect_uri: str, )", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "get_decrypted_access", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    def get_decrypted_access(self, connector_id: str) -> Tuple[Optional[str], Optional[str], Opt/", "language": "Python", "typeref": "typename:Tuple[Optional[str],Optional[str],Optional[datetime]]", "kind": "member", "signature": "(self, connector_id: str)", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "get_tokens", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    def get_tokens(self, connector_id: str) -> Optional[OAuthState]:$/", "language": "Python", "typeref": "typename:Optional[OAuthState]", "kind": "member", "signature": "(self, connector_id: str)", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^logger = get_logger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "save_tokens", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    def save_tokens($/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "( self, connector_id: str, name: str, access_token: str, refresh_token: Optional[str], scope: Optional[str], expires_at: Optional[datetime], extra: Optional[Dict[str, Any]] = None, )", "scope": "TokenStore", "scopeKind": "class"}], "hash": "705a5cfa93fddbebf4da02b165b81c35", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/src/core/token_store.py", "fields": [{"name": "logger = get_logger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}]}