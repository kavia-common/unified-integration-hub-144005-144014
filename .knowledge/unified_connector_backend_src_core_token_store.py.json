{"is_source_file": true, "format": "Python", "description": "This file defines the TokenStore class that manages encrypted storage, retrieval, and refreshing of OAuth tokens for tenants and connectors within a larger application. It encapsulates methods for saving tokens, fetching them, decrypting, and ensuring token validity, including refreshing tokens from Atlassian when expired.", "external_files": ["src.core.db", "src.core.logging", "src.core.models", "src.core.security", "src.core.settings", "httpx"], "external_methods": ["tenant_collection", "upsert_by_id", "get_logger", "OAuthState", "encrypt_secret", "decrypt_secret", "compute_expiry", "is_expired", "get_settings"], "published": ["TokenStore"], "classes": [{"name": "TokenStore", "description": "Manages encrypted storage and refresh of OAuth tokens per tenant and connector, offering methods to save, retrieve, decrypt, and refresh tokens asynchronously."}], "methods": [{"name": "None save_tokens( self, connector_id: str, name: str, access_token: str, refresh_token: Optional[str], scope: Optional[str], expires_at: Optional[datetime], extra: Optional[Dict[str, Any]] = None, )", "description": "Stores connector metadata with encrypted tokens, performing an upsert operation into the database.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "Optional[OAuthState] get_tokens(self, connector_id: str)", "description": "Fetches encrypted tokens from storage and returns them as an OAuthState object.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "Tuple[Optional[str],Optional[str],Optional[datetime]] get_decrypted_access(self, connector_id: str)", "description": "Decrypts the stored tokens and returns the access token, refresh token, and expiry as plaintext.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "Optional[str] ensure_valid_token_atlassian( self, connector_id: str, name: str, client_id: str, client_secret: Optional[str], refresh_token: Optional[str], redirect_uri: str, )", "description": "Asynchronously refreshes the Atlassian OAuth token if expired and saves the new token, returning the valid access token or None if refresh fails.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "__init__(self, tenant_id: str)", "scope": "TokenStore", "scopeKind": "class", "description": "unavailable"}], "calls": ["tenant_collection", "upsert_by_id", "get_logger", "self.collection.find_one", "decrypt_secret", "is_expired", "compute_expiry", "httpx.AsyncClient", "resp.json", "self.save_tokens"], "search-terms": ["TokenStore", "OAuth tokens management", "encrypted token storage", "refresh OAuth token", "Atlassian OAuth refresh"], "state": 2, "file_id": 21, "knowledge_revision": 47, "git_revision": "", "ctags": [{"_type": "tag", "name": "TokenStore", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^class TokenStore:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    def __init__(self, tenant_id: str):$/", "language": "Python", "kind": "member", "signature": "(self, tenant_id: str)", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "ensure_valid_token_atlassian", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    async def ensure_valid_token_atlassian($/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "member", "signature": "( self, connector_id: str, name: str, client_id: str, client_secret: Optional[str], refresh_token: Optional[str], redirect_uri: str, )", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "get_decrypted_access", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    def get_decrypted_access(self, connector_id: str) -> Tuple[Optional[str], Optional[str], Opt/", "language": "Python", "typeref": "typename:Tuple[Optional[str],Optional[str],Optional[datetime]]", "kind": "member", "signature": "(self, connector_id: str)", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "get_tokens", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    def get_tokens(self, connector_id: str) -> Optional[OAuthState]:$/", "language": "Python", "typeref": "typename:Optional[OAuthState]", "kind": "member", "signature": "(self, connector_id: str)", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^logger = get_logger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "save_tokens", "path": "/home/kavia/workspace/code-generation/unified-integration-hub-144005-144014/unified_connector_backend/src/core/token_store.py", "pattern": "/^    def save_tokens($/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "( self, connector_id: str, name: str, access_token: str, refresh_token: Optional[str], scope: Optional[str], expires_at: Optional[datetime], extra: Optional[Dict[str, Any]] = None, )", "scope": "TokenStore", "scopeKind": "class"}], "hash": "d43b5b70faed5e332beb843af1f9cde4", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/src/core/token_store.py", "fields": [{"name": "logger = get_logger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"47": ""}]}